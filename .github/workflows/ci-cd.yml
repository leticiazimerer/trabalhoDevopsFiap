name: CI/CD - ESGMonitoring
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_DIR: "TrabalhoFacul"

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Debug tree
        run: |
          echo "Repo root:"
          ls -la
          echo
          echo "Project dir:"
          ls -la "${{ env.PROJECT_DIR }}" || true
          echo "Recursive:"
          ls -laR "${{ env.PROJECT_DIR }}" | head -n 200 || true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore "${{ env.PROJECT_DIR }}/src/ESGMonitoring.API/ESGMonitoring.API.csproj"

      - name: Build
        run: dotnet build "${{ env.PROJECT_DIR }}/src/ESGMonitoring.API/ESGMonitoring.API.csproj" -c Release --no-restore

      - name: Test
        run: dotnet test "${{ env.PROJECT_DIR }}/src/ESGMonitoring.Tests/ESGMonitoring.Tests.csproj" -c Release --no-build --logger "trx;LogFileName=test_results.trx"

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/test_results.trx"

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/esgmonitoring-api
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: |
          docker build -f "${{ env.PROJECT_DIR }}/Dockerfile" -t $IMAGE_NAME:${{ github.sha }} "${{ env.PROJECT_DIR }}"

      - name: Push image
        run: docker push $IMAGE_NAME:${{ github.sha }}

  deploy-staging:
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to staging via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            export IMAGE=ghcr.io/${{ github.repository_owner }}/esgmonitoring-api:${{ github.sha }}
            mkdir -p ~/esg-app
            cd ~/esg-app
            cat > docker-compose.yml << 'YAML'
            services:
              api:
                image: $IMAGE
                ports:
                  - "8080:8080"
                environment:
                  - ASPNETCORE_ENVIRONMENT=Staging
            YAML
            docker compose pull || true
            docker compose up -d --remove-orphans

  deploy-production:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to production via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST_PROD }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            export IMAGE=ghcr.io/${{ github.repository_owner }}/esgmonitoring-api:${{ github.sha }}
            mkdir -p ~/esg-app
            cd ~/esg-app
            cat > docker-compose.yml << 'YAML'
            services:
              api:
                image: $IMAGE
                ports:
                  - "80:8080"
                environment:
                  - ASPNETCORE_ENVIRONMENT=Production
            YAML
            docker compose pull || true
            docker compose up -d --remove-orphans